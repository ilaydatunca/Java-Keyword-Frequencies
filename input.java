import java.util.LinkedList;public class MyHashMap<K, V> implements MyMap<K, V> {	// Construct a map with the specified initial capacity. Use this.	public MyHashMap(int initialCapacity, float loadFactorThreshold) { if (initialCapacity > MAXIMUM_CAPACITY)		this.capacity = MAXIMUM_CAPACITY; else			this.capacity = trimToPowerOf2(initialCapacity); this.loadFactorThreshold = loadFactorThreshold; table = new LinkedList[capacity];	}	@Override // Remove all of the entries from this map. Returns void. 	public void clear() {		size = 0;		removeEntries();	}	@Override // Return true if this map contains the value. Uses for loop. 	public boolean containsValue(V value) {		for (int i = 0; i < capacity; i++) { if (table[i] != null) {			LinkedList<Entry<K, V>> bucket = table[i]; for (Entry<K, V> entry : bucket)				if (entry.getValue().equals(value)) 					return true;		} }		return false;	}}